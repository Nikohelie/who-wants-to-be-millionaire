{"ast":null,"code":"export class FakeCurrentQuestionGateway {\n  constructor(questionsPool, correctAnswerByQuestionId) {\n    this.questionsPool = questionsPool;\n    this.correctAnswerByQuestionId = correctAnswerByQuestionId;\n    this.cursor = 0;\n  }\n  async loadCurrentQuestion() {\n    return this.questionsPool[this.cursor++];\n  }\n  async submitAnswer(questionId, answerLetter) {\n    return {\n      correct: this.correctAnswerByQuestionId[questionId],\n      given: answerLetter,\n      status: this.correctAnswerByQuestionId[questionId] === answerLetter ? \"RIGHT\" : \"WRONG\"\n    };\n  }\n}","map":{"version":3,"names":["FakeCurrentQuestionGateway","constructor","questionsPool","correctAnswerByQuestionId","cursor","loadCurrentQuestion","submitAnswer","questionId","answerLetter","correct","given","status"],"sources":["/Users/nhelie-treezor/dev/tdd-cleanarchi-web-15-fevrier-2023/src/who-wants-to-be-millionaire/adapters/secondary/gateways/current-gateway/fake/fakeCurrentQuestionGateway.ts"],"sourcesContent":["import { CurrentQuestionGateway } from \"../../../../../core-logic/gateways/currentQuestionGateway\";\nimport { Question } from \"../../../../../core-logic/usecases/current-question-retrieval/question\";\nimport { AnswerLetter } from \"../../../../../store/appState\";\nimport { AnswerSubmissionValidation } from \"../../../../../core-logic/usecases/answer-submission/answerSubmissionValidation\";\n\nexport class FakeCurrentQuestionGateway implements CurrentQuestionGateway {\n  private cursor: number = 0;\n  constructor(\n    private questionsPool: Question[],\n\n    private correctAnswerByQuestionId: Record<string, AnswerLetter>\n  ) {}\n\n  async loadCurrentQuestion(): Promise<Question> {\n    return this.questionsPool[this.cursor++];\n  }\n\n  async submitAnswer(\n    questionId: string,\n    answerLetter: AnswerLetter\n  ): Promise<AnswerSubmissionValidation> {\n    return {\n      correct: this.correctAnswerByQuestionId[questionId],\n      given: answerLetter,\n      status:\n        this.correctAnswerByQuestionId[questionId] === answerLetter\n          ? \"RIGHT\"\n          : \"WRONG\",\n    };\n  }\n}\n\nexport interface ArrayIndexPicker {\n  pick<T>(array: Array<T>): number;\n}\n"],"mappings":"AAKA,OAAO,MAAMA,0BAA0B,CAAmC;EAExEC,WAAW,CACDC,aAAyB,EAEzBC,yBAAuD,EAC/D;IAAA,KAHQD,aAAyB,GAAzBA,aAAyB;IAAA,KAEzBC,yBAAuD,GAAvDA,yBAAuD;IAAA,KAJzDC,MAAM,GAAW,CAAC;EAKvB;EAEH,MAAMC,mBAAmB,GAAsB;IAC7C,OAAO,IAAI,CAACH,aAAa,CAAC,IAAI,CAACE,MAAM,EAAE,CAAC;EAC1C;EAEA,MAAME,YAAY,CAChBC,UAAkB,EAClBC,YAA0B,EACW;IACrC,OAAO;MACLC,OAAO,EAAE,IAAI,CAACN,yBAAyB,CAACI,UAAU,CAAC;MACnDG,KAAK,EAAEF,YAAY;MACnBG,MAAM,EACJ,IAAI,CAACR,yBAAyB,CAACI,UAAU,CAAC,KAAKC,YAAY,GACvD,OAAO,GACP;IACR,CAAC;EACH;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}