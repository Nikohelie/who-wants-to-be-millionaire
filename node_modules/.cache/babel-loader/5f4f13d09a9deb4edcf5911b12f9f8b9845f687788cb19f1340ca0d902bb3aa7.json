{"ast":null,"code":"var _s = $RefreshSig$();\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { currentQuestionRetrievalReducer as currentQuestionRetrieval } from \"../core-logic/reducers/currentQuestionRetrieval.reducer\";\nimport { answerSubmissionValidationReducer as answerSubmissionValidation } from \"../core-logic/reducers/answerSubmissionValidation.reducer\";\nimport { pyramidReducer as pyramid } from \"../core-logic/reducers/pyramid.reducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { answerSubmissionValidationListenerMiddleware } from \"../core-logic/usecases/answer-submission/next-question-retrieval/answerSubmissionValidationListener\";\nexport const initReduxStore = (dependencies, includeRTKListeners) => {\n  return configureStore({\n    reducer: {\n      currentQuestionRetrieval,\n      answerSubmissionValidation,\n      pyramid\n    },\n    middleware: getDefaultMiddleware => {\n      const middleware = getDefaultMiddleware({\n        thunk: {\n          extraArgument: dependencies\n        },\n        serializableCheck: false\n      });\n      if (includeRTKListeners) return middleware.prepend(answerSubmissionValidationListenerMiddleware.middleware);\n      return middleware;\n    },\n    devTools: true\n  });\n};\nexport const useAppDispatch = () => {\n  _s();\n  return useDispatch();\n};\n_s(useAppDispatch, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});\nexport const useAppSelector = useSelector;","map":{"version":3,"names":["configureStore","currentQuestionRetrievalReducer","currentQuestionRetrieval","answerSubmissionValidationReducer","answerSubmissionValidation","pyramidReducer","pyramid","useDispatch","useSelector","answerSubmissionValidationListenerMiddleware","initReduxStore","dependencies","includeRTKListeners","reducer","middleware","getDefaultMiddleware","thunk","extraArgument","serializableCheck","prepend","devTools","useAppDispatch","useAppSelector"],"sources":["/Users/nhelie-treezor/dev/tdd-cleanarchi-web-15-fevrier-2023/src/who-wants-to-be-millionaire/store/reduxStore.ts"],"sourcesContent":["import {\n  Action,\n  AnyAction,\n  configureStore,\n  Store,\n  ThunkAction,\n  ThunkDispatch,\n} from \"@reduxjs/toolkit\";\nimport { AppState } from \"./appState\";\nimport { currentQuestionRetrievalReducer as currentQuestionRetrieval } from \"../core-logic/reducers/currentQuestionRetrieval.reducer\";\nimport { answerSubmissionValidationReducer as answerSubmissionValidation } from \"../core-logic/reducers/answerSubmissionValidation.reducer\";\nimport { pyramidReducer as pyramid } from \"../core-logic/reducers/pyramid.reducer\";\nimport { CurrentQuestionGateway } from \"../core-logic/gateways/currentQuestionGateway\";\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { answerSubmissionValidationListenerMiddleware } from \"../core-logic/usecases/answer-submission/next-question-retrieval/answerSubmissionValidationListener\";\n\nexport interface Dependencies {\n  currentQuestionGateway: CurrentQuestionGateway;\n}\n\nexport const initReduxStore = (\n  dependencies: Partial<Dependencies>,\n  includeRTKListeners?: boolean\n) => {\n  return configureStore({\n    reducer: {\n      currentQuestionRetrieval,\n      answerSubmissionValidation,\n      pyramid,\n    },\n    middleware: (getDefaultMiddleware) => {\n      const middleware = getDefaultMiddleware({\n        thunk: {\n          extraArgument: dependencies,\n        },\n        serializableCheck: false,\n      });\n      if (includeRTKListeners)\n        return middleware.prepend(\n          answerSubmissionValidationListenerMiddleware.middleware\n        );\n      return middleware;\n    },\n    devTools: true,\n  });\n};\n\nexport type ReduxStore = Store<AppState> & {\n  dispatch: ThunkDispatch<AppState, Dependencies, Action>;\n};\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  AppState,\n  Dependencies,\n  AnyAction\n>;\n\nexport type AppDispatch = ThunkDispatch<AppState, Dependencies, Action>;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<AppState> = useSelector;\n"],"mappings":";AAAA,SAGEA,cAAc,QAIT,kBAAkB;AAEzB,SAASC,+BAA+B,IAAIC,wBAAwB,QAAQ,yDAAyD;AACrI,SAASC,iCAAiC,IAAIC,0BAA0B,QAAQ,2DAA2D;AAC3I,SAASC,cAAc,IAAIC,OAAO,QAAQ,wCAAwC;AAElF,SAA+BC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAC5E,SAASC,4CAA4C,QAAQ,qGAAqG;AAMlK,OAAO,MAAMC,cAAc,GAAG,CAC5BC,YAAmC,EACnCC,mBAA6B,KAC1B;EACH,OAAOZ,cAAc,CAAC;IACpBa,OAAO,EAAE;MACPX,wBAAwB;MACxBE,0BAA0B;MAC1BE;IACF,CAAC;IACDQ,UAAU,EAAGC,oBAAoB,IAAK;MACpC,MAAMD,UAAU,GAAGC,oBAAoB,CAAC;QACtCC,KAAK,EAAE;UACLC,aAAa,EAAEN;QACjB,CAAC;QACDO,iBAAiB,EAAE;MACrB,CAAC,CAAC;MACF,IAAIN,mBAAmB,EACrB,OAAOE,UAAU,CAACK,OAAO,CACvBV,4CAA4C,CAACK,UAAU,CACxD;MACH,OAAOA,UAAU;IACnB,CAAC;IACDM,QAAQ,EAAE;EACZ,CAAC,CAAC;AACJ,CAAC;AAeD,OAAO,MAAMC,cAAc,GAAG;EAAA;EAAA,OAAMd,WAAW,EAAe;AAAA;AAAC,GAAlDc,cAAc;EAAA,QAASd,WAAW;AAAA;AAC/C,OAAO,MAAMe,cAA8C,GAAGd,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}